
@{
	ViewData["Title"] = "PlaceOrder";
	Layout = "~/Views/Shared/_LayoutLogin.cshtml";
}
@section head{
	<title>Laundry Go - Main Page</title>
	<style>
		/* Always set the map height explicitly to define the size of the div
			 * element that contains the map. */

		#map-new {
			height: 400px;
			width:100%;
		}

		/* Optional: Makes the sample page fill the window. */

		html,
		body {
			height: 100%;
			margin: 0;
			padding: 0;
		}
		.container{
			width:100%;
		}
	</style>
}

    <div class="container" style="margin-top:100px">
      <div class="row">
        <div class="col-12 ml-auto mr-auto">
						<h1>Place Order</h1>
						<br>
      				<div class="card">
          			<div class="card-header card-header-icon card-header-danger">
            			<div class="card-icon">
              			<h2><i class="material-icons">language</i> 
										Laundry Information</h2>
            			</div>
          			</div>
         				 <div class="card-body">
              		<h4 class="card-title">Laundry Information</h4>
                  
									<div class="container">
									<div class="row">
									<div class="col-md-4">
										<h4>Bag Quantity:</h4>
									<div class="form-group row">
										<div class="col-xs-3"><i class="fas fa-shopping-bag fa-4x text-info"></i></div>
										<div class="col-xs-6" style="padding: 15px;">
											<input type="text" id="totalBag" class="form-control" value="0">
										</div>
										<div class="col-xs-3">
											<button class="btn btn-info btn-sm" id="bagPlus"><i class="fas fa-plus"></i></button><br/>
											<button class="btn btn-default btn-sm" id="bagMinus" style="margin-top: 5px;"><i class="fas fa-minus"></i></button>
										</div>
									</div>
									<h4>Total Bag Weight (KG):</h4>
									<div class="form-group row">
										<div class="col-xs-3"><i class="fas fa-weight fa-4x text-info"></i></div>
										<div class="col-xs-6" style="padding: 15px;">
											<input type="text" id="totalWeight" class="form-control" value="0">
										</div>
										<div class="col-xs-3">
											<button class="btn btn-info btn-sm" id="weightPlus"><i class="fas fa-plus"></i></button><br/>
											<button class="btn btn-default btn-sm" id="weightMinus" style="margin-top: 5px;"><i class="fas fa-minus"></i></button>
										</div>
									</div>
									</div>
									<!-- end col 6 -->
									<div class="col-md-8">
										<h4>Type of Services:</h4>
										<div class="row">
											<div class="col-md-4">
												<div class="form-check">
               				 		<label class="form-check-label">
                 		 				<input class="form-check-input" type="checkbox" name="wash" value="" checked> Wash
                  					<span class="form-check-sign">
                    					<span class="check"></span>
                  					</span>
                					</label>
              					</div>
											</div>
											<div class="col-md-4">
												<div class="form-check">
               				 		<label class="form-check-label">
                 		 				<input class="form-check-input" type="checkbox" name="dry_cleaning" value=""> Dry Cleaning
                  					<span class="form-check-sign">
                    					<span class="check"></span>
                  					</span>
                					</label>
              					</div>
											</div>
											<div class="col-md-4">
												<div class="form-check">
               				 		<label class="form-check-label">
                 		 				<input class="form-check-input" type="checkbox" name="curtain" value=""> Curtain
                  					<span class="form-check-sign">
                    					<span class="check"></span>
                  					</span>
                					</label>
              					</div>
											</div>
											<div class="col-md-4">
												<div class="form-check">
               				 		<label class="form-check-label">
                 		 				<input class="form-check-input" type="checkbox" name="other" value=""> Other
                  					<span class="form-check-sign">
                    					<span class="check"></span>
                  					</span>
                					</label>
              					</div>
											</div>
										</div>
									</div> 
									<!-- end col 6 -->


									
								</div>
	</div>
								

          			</div>
      				</div>


							
  					
      </div>
    </div>
		</div>
<br>
<div class="container">
	<div class="row">
		<div class="card">
			<div class="card-header card-header-icon card-header-warning">
            			<div class="card-icon">
              			<h2><i class="material-icons">
local_shipping
</i>
										Pickup Information</h2>
            			</div>
          			</div>
  <div class="card-body">
    <h4 class="card-title">Place Order</h4>

		<div class="row">
			<div class="col-12">
					<div class="container">
							<div class="row">

								<div class="col-sm-6">

									<div class="form-group">
										<!-- <label for="">Please enter pickup & dropoff address:</label> -->
									</div>
									<div class="form-group">
										<label>Pickup Address</label>
										<input type="textbox" class="form-control" placeholder="" name="add_1" value="" id="autocomplete">
									</div>
									<div class="form-group">
										<label>Dropoff Address (Optional)</label>
										<input type="textbox" class="form-control" placeholder="" name="add_2" id="autocomplete2">
										<small>Leave empty if the address is the same.</small>
									</div>
									<div class="form-group">
      							<input id="geocode" class="btn btn-info" type="button" value="Set Pickup Point">
									</div>
									
									
								</div>
								<!-- end col sm 6 -->
								<div class="col-sm-6">
									<label for="map-new">Select Pickup Point:</label>
									
										<div id="map-new"></div>

									
									
									
								</div>
								<div class="col-sm-6">
								<!--	<div class="row">
								<div class="form-group col-xs-6">
									<label>Pickup Time</label>
									<input type="time" class="form-control" name="order_pickup_time">
								</div>
								<div class="form-group col-xs-6">
									<label>Pickup Date</label>
									<input type="date" class="form-control" name="order_pickup_day">
								</div>
								</div>
								<div class="row">
								<div class="form-group col-xs-6">
									<label>Dropoff Time</label>
									<input type="time" class="form-control" name="order_dropoff_time">
								</div>
								<div class="form-group col-xs-6">
									<label>Dropoff Date</label>
									<input type="date" class="form-control" name="order_dropoff_day">
								</div>
								</div>-->


									<div class="from-group">
										<input type="hidden" class="form-control" id="lat_pickup">
										<input type="hidden" class="form-control" id="lng_pickup">
										<input type="hidden" class="form-control" id="lat_dropoff">
										<input type="hidden" class="form-control" id="lng_dropoff">
										

									</div>
									
								</div>

							</div>
						
</div>
</div>


		</div>
		<!-- end panel new -->
  </div>
</div>


<button type="reset" class="btn btn-default js-scroll-trigger">Reset</button>
<input type="submit" class="btn btn-info js-scroll-trigger" value="Next">
	</div>
</div>
	




<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDkY_x9vsdgETaBOAlvw8eJANTiuWGy7Xs&libraries=places" async
				defer></script>

<!-- Bootstrap core JavaScript -->
<script src="../assets/js/core/jquery.min.js" type="text/javascript"></script>
<script src="../vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

<!-- Plugin JavaScript -->
<script src="../vendor/jquery-easing/jquery.easing.min.js"></script>

<!-- Custom scripts for this template -->
<script src="../js/new-age.min.js"></script>

<script>

	$(document).ready(function(){
		$().button('toggle');
	

function initialize(){
	initAutocomplete();
	initAutocomplete2();
	initMap();
}

google.maps.event.addDomListener(window, 'load', initialize);
	// get user locations
	var position;
	var markers = [];
	var markers2 = [];
	getLocation();

	function getLocation() {
		if (navigator.geolocation) {
			// navigator.geolocation.getCurrentPosition(showPosition);
		} else {
			x.innerHTML = "Geolocation is not supported by this browser.";
		}
	}
	var map;
	var marker;
	function showPosition(position) {
		position = {
			lng: position.coords.longitude,
			lat: position.coords.latitude
		}
		map = new google.maps.Map(document.getElementById('map-new'), {
			center: { lat: position.lat, lng: position.lng },
			zoom: 17
		});
		marker = new google.maps.Marker({
			position: { lat: position.lat, lng: position.lng },
			map: map,
			draggable: true
		});
		//document.getElementById("add_lat").value = position.lat;
		//document.getElementById("add_long").value = position.lng;
		google.maps.event.addListener(marker, 'dragend', function (event) {


			document.getElementById("add_lat").value = event.latLng.lat();
			document.getElementById("add_long").value = event.latLng.lng();
		});
	}

			// google.maps.event.addDomListener(window, 'load', initialize());


// address autocomlete
var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search to geographical
  // location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** type {!HTMLInputElement} */(document.getElementById('autocomplete')),
      {types: ['geocode']});
  // When the user selects an address from the dropdown, populate the address
  // fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();
  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}

// address autocomlete
var placeSearch2, autocomplete2;
var componentForm2 = {
  street_number2: 'short_name',
  route2: 'long_name',
  locality2: 'long_name',
  administrative_area_level_12: 'short_name',
  country2: 'long_name',
  postal_code2: 'short_name'
};

function initAutocomplete2() {
  // Create the autocomplete object, restricting the search to geographical
  // location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** type {!HTMLInputElement} */(document.getElementById('autocomplete2')),
      {types: ['geocode']});

  // When the user selects an address from the dropdown, populate the address
  // fields in the form.
  autocomplete.addListener('place_changed', fillInAddress2);
}

function fillInAddress2() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate2() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}

// Geolocation Function
function initMap() {
        var map = new google.maps.Map(document.getElementById('map-new'), {
          zoom: 8,
          center: {lat: 3.519863,lng: 101.538116}
        });
				setMapOnAll(map);
				setMapOnAll2(map);
        var geocoder = new google.maps.Geocoder();

      //  document.getElementById('submit').addEventListener('click', function() {
				//	deleteMarkers();
         // geocodeAddress(geocoder, map);
				//	geocodeAddress2(geocoder, map);
        //});

				document.getElementById('geocode').addEventListener('click', function(){
					deleteMarkers();
          geocodeAddress(geocoder, map);
				//});
				//document.getElementById('autocomplete2').addEventListener('change', function(){
					deleteMarkers2();
					geocodeAddress2(geocoder, map);
				});
      }

      function geocodeAddress(geocoder, resultsMap) {
				
        var address = document.getElementById('autocomplete').value;
				if(address != ""){
					geocoder.geocode({'address': address}, function(results, status) {
          	if (status === 'OK') {
            	resultsMap.setCenter(results[0].geometry.location);
            	var marker = new google.maps.Marker({
              	map: resultsMap,
              	position: results[0].geometry.location,
								draggable: true,
								animation: google.maps.Animation.DROP,
								label: "PA"
            	});
							markers.push(marker);
							document.getElementById('lat_pickup').value = results[0].geometry.location.lat();
							document.getElementById('lng_pickup').value = results[0].geometry.location.lng();
							google.maps.event.addListener(marker, 'dragend', function (event) {
								document.getElementById("lat_pickup").value = event.latLng.lat();
								document.getElementById("lng_pickup").value = event.latLng.lng();
							});
          	} else {
            	alert('Geocode was not successful for the following reason: ' + status);
          	}
        	});
				}else if(address == ""){

				}
        
      }

			function geocodeAddress2(geocoder, resultsMap) {
				
        var address = document.getElementById('autocomplete2').value;
				if(address != ""){
						geocoder.geocode({'address': address}, function(results, status) {
          	if (status === 'OK') {
            	resultsMap.setCenter(results[0].geometry.location);
            	var marker = new google.maps.Marker({
              	map: resultsMap,
              	position: results[0].geometry.location,
								draggable: true,
								animation: google.maps.Animation.DROP,
								label: "DA"
            	});
						
							markers2.push(marker);
							document.getElementById('lat_dropoff').value = results[0].geometry.location.lat();
							document.getElementById('lng_dropoff').value = results[0].geometry.location.lng();
							google.maps.event.addListener(marker, 'dragend', function (event) {
								document.getElementById("lat_dropoff").value = event.latLng.lat();
								document.getElementById("lng_dropoff").value = event.latLng.lng();
							});
          	} else {
            alert('Geocode was not successful for the following reason: ' + status);
          	}
        	});
				}else if(address == ""){

				}
        
      }

			

      // Sets the map on all markers in the array.
      function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
        setMapOnAll(null);
      }

      // Shows any markers currently in the array.
      function showMarkers() {
        setMapOnAll(map);
      }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
        clearMarkers();
        markers = [];
      }

// delete marker function 2
// Sets the map on all markers in the array.
      function setMapOnAll2(map) {
        for (var i = 0; i < markers2.length; i++) {
          markers2[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers2() {
        setMapOnAll2(null);
      }

      // Shows any markers currently in the array.
      function showMarkers2() {
        setMapOnAll2(map);
      }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers2() {
        clearMarkers2();
        markers2 = [];
      }

var totalWeight = 0;
var totalBag = 0;

	$('#totalWeight').attr('value', totalWeight);
	$('#totalBag').attr('value', totalBag);
	// total weight click plus
	$('#weightPlus').click(function(){
		totalWeight++;
		$('#totalWeight').attr('value', totalWeight);
	});

	// total weight click minus
	$('#weightMinus').click(function(){
		if(totalWeight > 0){
			totalWeight--;
			$('#totalWeight').attr('value', totalWeight);
		}
	});

	// total bag click plus
	$('#bagPlus').click(function(){
			totalBag++;
			$('#totalBag').attr('value', totalBag);
	});

	// total bag click minus
	$('#bagMinus').click(function(){
		if(totalBag > 0){
			totalBag--;
			$('#totalBag').attr('value', totalBag);
		}
	});
});
</script>


